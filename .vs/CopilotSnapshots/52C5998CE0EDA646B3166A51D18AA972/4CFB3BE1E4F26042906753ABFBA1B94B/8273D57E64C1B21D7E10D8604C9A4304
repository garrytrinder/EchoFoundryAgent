using Microsoft.Agents.Builder;
using Microsoft.Agents.Builder.State;
using Microsoft.Agents.Core.Models;
using EchoAgent.Models;
using System.Linq;

namespace EchoAgent.Services;

/// <summary>
/// Service for managing streaming responses.
/// </summary>
public class StreamingResponseManager : IStreamingResponseManager
{
    private const string WorkingMessage = "Working on it...";
    private const string SensitivityLabelName = "General";
    private const string SensitivityLabelDescription = "Business data which is NOT meant for public consumption. This can be shared with internal employees, business guests and external partners as needed.";

    /// <summary>
    /// Initializes the streaming response with working message and message count.
    /// </summary>
    public async Task InitializeResponseAsync(ITurnContext turnContext, ITurnState turnState, CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(turnContext);
        ArgumentNullException.ThrowIfNull(turnState);

        await turnContext.StreamingResponse.QueueInformativeUpdateAsync(WorkingMessage, cancellationToken).ConfigureAwait(false);
        
        int messageCount = turnState.Conversation.IncrementMessageCount();
        turnContext.StreamingResponse.QueueTextChunk($"({messageCount}) ");
    }

    /// <summary>
    /// Finalizes the streaming response with metadata and citations.
    /// </summary>
    public async Task FinalizeResponseAsync(ITurnContext turnContext, MessageProcessingContext context, CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(turnContext);
        ArgumentNullException.ThrowIfNull(context);

        // Enable AI generation label
        turnContext.StreamingResponse.EnableGeneratedByAILabel = true;

        // Add sensitivity label
        turnContext.StreamingResponse.SensitivityLabel = new SensitivityUsageInfo()
        {
            Name = SensitivityLabelName,
            Description = SensitivityLabelDescription
        };

        // Add citations from file references
        var citations = context.FileReferences.Select(fr => fr.Citation).ToList();
        turnContext.StreamingResponse.AddCitations(citations);
        
        await Task.CompletedTask.ConfigureAwait(false);
    }
}