using Microsoft.SemanticKernel.Agents.AzureAI;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.Agents.Core.Models;

namespace EchoAgent.Services;

/// <summary>
/// Service for processing agent responses.
/// </summary>
public class AgentResponseProcessor : IAgentResponseProcessor
{
    private readonly IAnnotationProcessor _annotationProcessor;
    private readonly IMessageContentProcessor _messageContentProcessor;

    public AgentResponseProcessor(
        IAnnotationProcessor annotationProcessor,
        IMessageContentProcessor messageContentProcessor)
    {
        _annotationProcessor = annotationProcessor ?? throw new ArgumentNullException(nameof(annotationProcessor));
        _messageContentProcessor = messageContentProcessor ?? throw new ArgumentNullException(nameof(messageContentProcessor));
    }

    /// <summary>
    /// Processes the streaming response from the Azure AI Agent.
    /// </summary>
    public async Task ProcessAgentResponseStreamAsync(
        AzureAIAgent agent, 
        ChatMessageContent userMessage, 
        ITurnContext turnContext, 
        MessageProcessingContext context, 
        CancellationToken cancellationToken)
    {
        ArgumentNullException.ThrowIfNull(agent);
        ArgumentNullException.ThrowIfNull(userMessage);
        ArgumentNullException.ThrowIfNull(turnContext);
        ArgumentNullException.ThrowIfNull(context);

        await foreach (StreamingChatMessageContent messageChunk in agent.InvokeStreamingAsync(userMessage, cancellationToken: cancellationToken).ConfigureAwait(false))
        {
            await _annotationProcessor.ProcessAnnotationsAsync(messageChunk, agent, context, cancellationToken).ConfigureAwait(false);
            await _messageContentProcessor.ProcessMessageContentAsync(messageChunk, turnContext, context).ConfigureAwait(false);
        }
    }
}